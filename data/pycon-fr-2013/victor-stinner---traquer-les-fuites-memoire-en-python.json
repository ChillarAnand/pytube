{"tags": [], "thumbnail_url": "https://i.ytimg.com/vi/oQ17KDBr24I/maxresdefault.jpg", "embed": "", "added": "2015-07-31T17:40:40.866", "whiteboard": "", "video_flv_length": null, "title": "Traquer les fuites m\u00e9moire en Python", "duration": 1845, "description": "", "state": 1, "category": "PyCon FR 2013", "video_mp4_download_only": false, "video_flv_download_only": false, "video_mp4_url": null, "video_webm_length": null, "video_mp4_length": null, "recorded": "2013-11-30", "copyright_text": "", "source_url": "https://www.youtube.com/watch?v=oQ17KDBr24I", "video_webm_url": null, "summary": "Les fuites m\u00e9moire en Python ne peuvent pas \u00eatre analys\u00e9es avec les outils traditionnels car Python repose sur les compteurs de r\u00e9f\u00e9rence. Je vais pr\u00e9senter des outils sp\u00e9cifiques \u00e0 Python pour vous aider \u00e0 localiser vos fuites m\u00e9moires.\n\n- Consommation globale du processus (m\u00e9moire RSS)\n- Comprendre les cycles de r\u00e9f\u00e9rence\n- G\u00e9n\u00e9rer une image repr\u00e9sentant les liens entre les objets\n- Utilisation de gc.get_objects() et calcul manuel de la taille des objets\n- Tracer les allocations m\u00e9moires \u00e0 leur cr\u00e9ation\n- PEP 445: Add new APIs to customize Python memory allocators implement\u00e9e dans Python 3.4\n- Projet pytracemalloc", "video_ogv_url": null, "video_ogv_length": null, "updated": "2015-07-31T17:40:40.866", "id": 3751, "related_urls": [], "slug": "traquer-les-fuites-memoire-en-python", "quality_notes": "", "video_webm_download_only": false, "video_flv_url": null, "language": "French", "video_ogv_download_only": false, "speakers": ["Victor Stinner"]}