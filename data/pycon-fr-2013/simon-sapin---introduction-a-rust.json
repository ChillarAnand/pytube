{"tags": [], "thumbnail_url": "https://i.ytimg.com/vi/qjxihcTJZ34/maxresdefault.jpg", "embed": "", "added": "2015-07-31T17:40:40.600", "whiteboard": "", "video_flv_length": null, "title": "Introduction \u00e0 Rust", "duration": 1540, "description": "", "state": 1, "category": "PyCon FR 2013", "video_mp4_download_only": false, "video_flv_download_only": false, "video_mp4_url": null, "video_webm_length": null, "video_mp4_length": null, "recorded": "2013-11-30", "copyright_text": "", "source_url": "https://www.youtube.com/watch?v=qjxihcTJZ34", "video_webm_url": null, "summary": "Rust est un langage de programmation \u00ab syst\u00e8mes \u00bb qui se veux s\u00fbr, concurrent, et pragmatique. Un de ses objectifs est de remplacer C/C++ dans les domaines o\u00f9 un langage plus \u00ab haut niveau \u00bb tel que Python n'est pas adapt\u00e9 : noyau de syst\u00e8me d'exploitation, syst\u00e8me temps-r\u00e9el, moteur de navigateur web, etc.\n\nServo, un projet de Mozilla Research, est un moteur de rendu pour le web (tout comme Gecko est le moteur de Firefox) \u00e9crit en Rust et con\u00e7u pour tirer parti autant que possible du mat\u00e9riel moderne (multi-c\u0153ur) gr\u00e2ce aux fonctionnalit\u00e9s concurrentes de Rust.\n\n- Pr\u00e9sentation du langage: typage statique, s\u00fbret\u00e9 et justesse v\u00e9rifi\u00e9s par le compilateur, pointeurs uniques, pointeurs emprunt\u00e9s, tranches de vecteurs, etc.\n- \u00c9tat du projet (pr\u00e9-1.0)\n- Comment Servo g\u00e8re les changements dans le langage et la biblioth\u00e8que standard.\n- Mon ressenti apr\u00e8s avoir travaill\u00e9 sur Servo et WeasyPrint (Python), deux impl\u00e9mentations des m\u00eame sp\u00e9cifications CSS.\n- Une suite de tests bas\u00e9es sur des donn\u00e9es, et partag\u00e9e entre plusieurs impl\u00e9mentations.\n- Comment utiliser Rust et Python dans le m\u00eame programme, avec CFFI\n- Courte introduction \u00e0 la th\u00e9orie des types, et aux types alg\u00e9briques de donn\u00e9es.\n- Les types \u00ab sommes \u00bb sont des \u00ab unions tagg\u00e9es \u00bb en C, et des enum en Rust. (Plus g\u00e9n\u00e9ral que Enum dans la PEP 435.) Pourrait-on avoir quelque chose de similaire en Python ?", "video_ogv_url": null, "video_ogv_length": null, "updated": "2015-07-31T17:40:40.600", "id": 3749, "related_urls": [], "slug": "introduction-a-rust", "quality_notes": "", "video_webm_download_only": false, "video_flv_url": null, "language": "French", "video_ogv_download_only": false, "speakers": ["Simon Sapin"]}