{"tags": ["pypy"], "thumbnail_url": "http://i1.ytimg.com/vi/i7rO2qPiesc/hqdefault.jpg", "embed": "<object width=\"640\" height=\"390\"><param name=\"movie\" value=\"http://youtube.com/v/i7rO2qPiesc?version=3&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://youtube.com/v/i7rO2qPiesc?version=3&amp;hl=en_US\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object>", "added": "2014-07-10T22:35:10.550", "whiteboard": "", "video_flv_length": null, "title": "Object oriented Programming with NumPy using CPython & PyPy", "duration": null, "description": "In the paper we compare object-oriented implementations of an advection algorithm written in Python, C++ and modern FORTRAN. The MPDATA advection algorithm (Multidimensional Positive-Definite Advective Transport Algorithm) used as a core of weather, ocean and climate modelling systems serves as an example.\r\n\r\nIn the context of scientific programming, employment of object-oriented programming (OOP) techniques may help to improve code readability, and hence its auditability and maintainability. OOP offers, in particular, the possibility to reproduce in the program code the mathematical \"blackboard abstractions\" used in the literature. We compare how the choice of a particular language influences syntax clarity, code length and the performance: CPU time and memory usage.\r\n\r\nThe Python implementation of MPDATA is based on NumPy. Its performance is compared with C++/Blitz++ and FORTRAN implementations. A notable performance gain when switching from the standard CPython to PyPy will be exemplified, and the reasons for it will be briefly explained. Discussion of other selected solutions for improving the NumPy\u2019s relatively poor performance will be also presented.\r\n\r\nThis talk will describe and extend on the key findings presented in http://arxiv.org/abs/1301.1334.", "state": 1, "category": "SciPy 2014", "video_mp4_download_only": false, "video_flv_download_only": false, "video_mp4_url": null, "video_webm_length": null, "video_mp4_length": null, "recorded": "2014-07-09", "copyright_text": "http://www.youtube.com/t/terms", "source_url": "http://www.youtube.com/watch?v=i7rO2qPiesc", "video_webm_url": null, "summary": "In the paper we compare object-oriented implementations of an advection algorithm written in Python, C++ and modern FORTRAN. The main angles of comparison are code brevity and syntax clarity (and hence maintainability and auditability) as well as performance. A notable performance gain when switching from CPython to PyPy will be exemplified, and the reasons for it will be briefly explained. ", "video_ogv_url": null, "video_ogv_length": null, "updated": "2014-07-10T22:35:10.550", "id": 2733, "related_urls": [], "slug": "object-oriented-programming-with-numpy-using-cpyt", "quality_notes": "", "video_webm_download_only": false, "video_flv_url": null, "language": "English", "video_ogv_download_only": false, "speakers": ["Dorota Jarecka"]}