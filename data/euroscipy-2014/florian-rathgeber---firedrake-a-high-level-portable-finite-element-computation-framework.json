{
    "added": "2014-11-05T22:41:04.859",
    "category": "EuroScipy 2014",
    "copyright_text": "youtube",
    "description": "In an ideal world, scientific applications are computationally efficient,\r\nmaintainable, composable and allow scientists to work very productively. In\r\nthis talk we demonstrate that these goals are achievable for a specific\r\napplication domain by choosing suitable domain-specific abstractions\r\nimplemented in Python that encapsulate domain knowledge with a high degree\r\nof expressiveness.\r\n\r\nWe present [Firedrake](http://firedrakeproject.org/), a high-level Python framework for the portable\r\nsolution of partial differential equations on unstructured meshes with the\r\nfinite element method widely used in science and engineering. Firedrake is\r\nbuilt on top of [PyOP2](http://op2.github.io/PyOP2), a domain-specific language embedded in Python for\r\nparallel mesh-based computations. Finite element local assembly operations\r\nexecute the same computational kernel for every element of the mesh and is\r\ntherefore efficiently parallelisable.\r\n\r\nFiredrake allows scientists to describe variational forms and\r\ndiscretisations for finite element problems symbolically in a notation very\r\nclose to the maths using the Unified Form Language [UFL](https://bitbucket.org/fenics-project/ufl/) from the [FEniCS project](http://fenicsproject.org/). Variational forms are translated into computational kernels by the\r\nFEniCS Form Compiler [FFC](https://bitbucket.org/fenics-project/ffc/). Numerical linear algebra is delegated to PETSc,\r\nleveraged via its petsc4py interface.\r\n\r\nPyOP2 abstracts away the performance-portable parallel execution of these\r\nkernels on a range of hardware architectures, targeting multi-core CPUs with\r\nOpenMP and GPUs and accelerators with PyCUDA and PyOpenCL and distributed\r\nparallel computations with mpi4py. Backend-specific code tailored to each\r\nspecific computation is generated, just-in-time compiled and efficiently\r\nscheduled for parallel execution at runtime.\r\n\r\nDue to the composability of the Firedrake and PyOP2 abstractions, optimised\r\nimplementations for different hardware architectures can be automatically\r\ngenerated without any changes to a single high-level source. Performance\r\nmatches or exceeds what is realistically attainable by hand-written code.\r\nBoth projects are open source and developed at Imperial College London.\r\n",
    "duration": null,
    "embed": "<iframe type='text/html' src='http://www.youtube.com/embed/VdzE0ZBAa-Q' width='640' height='360' frameborder='0' allowfullscreen='true'/>",
    "id": 3336,
    "language": "English",
    "quality_notes": "",
    "recorded": "2014-10-22",
    "related_urls": [],
    "slug": "firedrake-a-high-level-portable-finite-element-c",
    "source_url": "https://www.youtube.com/watch?v=VdzE0ZBAa-Q",
    "speakers": [
        "Florian Rathgeber"
    ],
    "state": 1,
    "status": "published",
    "summary": "",
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/VdzE0ZBAa-Q/hqdefault.jpg",
    "title": "Firedrake: a High-level Portable Finite Element Computation Framework",
    "updated": "2014-11-05T22:41:04.859",
    "video_flv_download_only": false,
    "video_flv_length": null,
    "video_flv_url": "",
    "video_mp4_download_only": false,
    "video_mp4_length": null,
    "video_mp4_url": "",
    "video_ogv_download_only": false,
    "video_ogv_length": null,
    "video_ogv_url": "",
    "video_webm_download_only": false,
    "video_webm_length": null,
    "video_webm_url": "",
    "whiteboard": ""
}