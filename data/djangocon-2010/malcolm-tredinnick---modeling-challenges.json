{"tags": ["djangocon", "djangocon2010", "model"], "thumbnail_url": "http://a.images.blip.tv/Robertlofthouse-ModelingChallenges314.png", "embed": "", "added": "2012-02-23T04:20:00", "whiteboard": "", "video_flv_length": null, "title": "Modeling challenges", "duration": null, "description": "Modeling Challenges\n\nPresented by Malcolm Tredinnick\n\nHow would you model players, umpires and coaches in baseball data when the\nsame person can switch roles over the course of their life? How about servers\nin racks with power boards attached (and cords running across the room to\nremote boards)? Come along to see one approach to create minimal and well-\nperforming models for such real-life situations.\n\nAbstract\n\nThe slightly over-simplified but useful rule of thumb when creating database\nschema is \u201cnormalize until it hurts, [then] denormalize until it works.\u201d If\nonly people didn\u2019t skip the first step so often. Using a data modeling layer,\nsuch as Django's models, doesn't absolve the system architects from the need\nto create good design. It also doesn't require them to do so, since you can\nget away with a lot of sub-optimality with many data sets.\n\nThe real difficulty here, though, is that the trade-off between text-book\nideal modeling and easy to use is difficult to judge and takes practice to\ndevelop.\n\nThis talk will walk some interesting cases of model design that I've\nencountered recently. I'll explain how I approached the problem and what we\nended up with. These will include:\n\n  * Modeling people who might simultaneously play different roles in the system. For example, a person who was a baseball player and then became a coach \u2014 each role has different attributes attached to it. \n  * Modeling what appears to be a triangular dependency relationship with minimal redundancy in the data description and without needing really long query filters to access things. \n  * Handling date ranges (or other measured data) of different degrees of accuracy and precision. \n\nThis won't be a talk on theoretical database design. Rather, concrete examples\nof creating such designs and guiding the decisions by what might work best in\nthe final Django code. Hopefully, by listening to one person's approach\n(mine!), people faced with similar challenges will have another possible\nattack method in their toolbox.\n\n", "state": 1, "category": "DjangoCon 2010", "video_mp4_download_only": false, "video_flv_download_only": false, "video_mp4_url": null, "video_webm_length": null, "video_mp4_length": null, "recorded": null, "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", "source_url": "", "video_webm_url": null, "summary": "", "video_ogv_url": null, "video_ogv_length": 236827444, "updated": "2014-04-08T20:28:25.586", "id": 42, "related_urls": [], "slug": "djangocon-2010--modeling-challenges", "quality_notes": "", "video_webm_download_only": false, "video_flv_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/42_modeling-challenges.flv", "language": "English", "video_ogv_download_only": false, "speakers": ["Malcolm Tredinnick"]}