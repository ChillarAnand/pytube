{"tags": [], "thumbnail_url": "https://i.ytimg.com/vi/DmLHqOvbG9M/hqdefault.jpg", "embed": "<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/DmLHqOvbG9M\" frameborder=\"0\" allowfullscreen></iframe>", "added": "2015-10-18T16:10:53.291", "whiteboard": "needs editing", "video_flv_length": null, "title": "Spreadsheet-Driven Meta-Programming for Python", "duration": null, "description": "We've all had those very detail-oriented clients who are able to specify their needs very neatly, often by means of exhaustive spreadsheets. Wouldn't it be nice if we could turn these spreadsheets straight into Python code?\r\n\r\nIn this tutorial we'll use two sets of meta-programming techniques to derive Python code out of semi-formal descriptions: first, to build Django models requiring very detailed validation supplied by the client in a spreadsheet; second, to build a Python API for a hardware device, the description of which is maintained by the engineers in a spreadsheet.\r\n\r\nFor the Pycon attendance, this tutorial has both business value and technical value:\r\n\r\nBusiness value because spreadsheet-driven metaprogramming allows developers to:\r\n\r\n- respond to changes very fast by re-rendering their Python code from the modified spreadsheet descriptions.\r\n- avoid a certain class of human errors unavoidable when transcribing the requirements by hand.\r\n- save time which can be employed in other areas of the project, or with other clients.\r\n- clarify ambiguous specifications by making explicit all programmer's assumptions into the code generator.\r\n\r\nTechnical value because we'll be talking about:\r\n\r\n- api design,\r\n- Django modeling and validation,\r\n- consuming spreadsheets via csv dictreaders and elbow grease,\r\n- writing partially-applied functions via custom classes with a __call__ method,\r\n- implementing fluent apis with table-driven __getattr__ methods,\r\n- implementing iterators with __iter__ and __next__,\r\n- papering over some differences between Python 2 and Python 3 syntax,\r\n- and much, much more.\r\n\r\nWe'll be doing all of it in a hands-on manner, without getting distracted by abstract discussions of Python syntax. There will be some discussions of Python syntax, but they won't be abstract. We'll always have a goal in sight.\r\n\r\nLevel:\r\n\r\nIntermediate. You'll learn some advanced techniques, but all you need to really know in order to follow this tutorial is how lists, dictionaries, iteration and reading files work in Python. \r\n\r\nRequirements:\r\n\r\n- Attendees are expected to know basic Python (see above, under \"Level\").\r\n- A laptop and some knowledge of git will be useful for those wanting to follow along, but is not required. You can get a lot out of this tutorial just by watching and paying attention.\r\n\n\n", "state": 1, "category": "PyCon AU 2015", "video_mp4_download_only": false, "video_flv_download_only": false, "video_mp4_url": null, "video_webm_length": null, "video_mp4_length": null, "recorded": "2015-08-04", "copyright_text": "creativeCommon", "source_url": "https://www.youtube.com/watch?v=DmLHqOvbG9M", "video_webm_url": null, "summary": "", "video_ogv_url": null, "video_ogv_length": null, "updated": "2015-10-18T16:10:53.291", "id": 3959, "related_urls": [], "slug": "spreadsheet-driven-meta-programming-for-python", "quality_notes": "", "video_webm_download_only": false, "video_flv_url": null, "language": "English", "video_ogv_download_only": false, "speakers": ["Javier Candeira"]}