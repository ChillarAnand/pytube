<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pytube</title><link href="/" rel="alternate"></link><link href="/feeds/pytexas-2011.atom.xml" rel="self"></link><id>/</id><updated>2014-04-08T20:28:00+00:00</updated><entry><title>About Python Namespaces (and Code Objects)</title><link href="/pytexas-2011/pytexas-2011-about-python-namespaces-and-code-objects.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Unknown</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-about-python-namespaces-and-code-objects.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/549_about-python-namespaces-and-code-objects.m4v"&gt;&lt;img alt="About Python Namespaces (and Code Objects)" src="http://a.images.blip.tv/Nextdayvideo-AboutPythonNamespacesAndCodeObjects984-914.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;We'll explore namespaces using the Python interactive prompt, with graphical
display of object trees using Graphviz. Also explained will be the namespace
concepts of closures and early binding; how to define new objects without
subclassing via use of default/curried arguments and closures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/549_about-python-namespaces-and-code-objects.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/549_about-python-namespaces-and-code-objects.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Asynchronous Web Development with Tornado</title><link href="/pytexas-2011/pytexas-2011-asynchronous-web-development-with-tornado.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Josh Marshall</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-asynchronous-web-development-with-tornado.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/561_asynchronous-web-development-with-tornado.m4v"&gt;&lt;img alt="Asynchronous Web Development with Tornado" src="http://a.images.blip.tv/Nextdayvideo-AsynchronousWebDevelopmentWithTornado459-712.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Web frameworks like Django, Flask, etc. are great for most traditional web
sites. However, there is a growing need to produce web applications that are
responsive to external &amp;quot;events&amp;quot;, whether a response from Twitter's API or a
new message in an online chat room. Newer, non-blocking frameworks like
Tornado seek to address this in a scalable manner.&lt;/p&gt;
&lt;p&gt;This talk will briefly introduce non-blocking principles and patterns, and
move quickly into an overview of the library, as well as use cases and anti-
use cases. A portion of the time will also be spent pointing out community
libraries that are building on Tornado's foundation.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1. Introduction
  1. Why another framework?
  2. Intro to Asynchronous Design
2. Overview of a Tornado project
  1. a. Application
  2. b. Basic (blocking) Request Handlers
  3. c. Templates
  4. d. Asynchronous Handlers
  5. e. To block or not to block
3. Batteries included
  1. Auth module
  2. Options module
  3. Database
  4. UIModules
  5. Security
4. Community
  1. a. Tornad.io
  2. b. No-SQL libraries
  3. c. Twisted integration
  4. d. Torn Admin
5. Q&amp;amp;A;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/561_asynchronous-web-development-with-tornado.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/561_asynchronous-web-development-with-tornado.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Cassandra for Python Developers</title><link href="/pytexas-2011/pytexas-2011-cassandra-for-python-developers.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Tyler Hobbs</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-cassandra-for-python-developers.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/556_cassandra-for-python-developers.m4v"&gt;&lt;img alt="Cassandra for Python Developers" src="http://a.images.blip.tv/Nextdayvideo-CassandraForPythonDevelopers227-199.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Being non-relational, Cassandra's data model is fundamentally different from
that of a relational database. In addition, it uses an RPC based API rather
than a query language. On top of that, Cassandra is a distributed database, so
the client must be aware of and interact with multiple nodes in the cluster.
All of these attributes of Cassandra make the client libraries a different
experience. Fortunately, the Python client library is the easiest way to use
Cassandra. This talk will start with a high level overview of the clustering
model of Cassandra then its data model. A large portion of the talk will cover
the pycassa methods that interact with the data model of Cassandra, i.e.
inserting, fetching, and removing data. A small amount of time will be
dedicated to describing connection pooling in pycassa -- how it handles node
failures, distributes requests, etc. The final 10 minutes will be devoted to
Q&amp;amp;A.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/556_cassandra-for-python-developers.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/556_cassandra-for-python-developers.m4v&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tags: fetching&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="fetching"></category></entry><entry><title>Custom Decorators for Authentication and Authorization</title><link href="/pytexas-2011/pytexas-2011-custom-decorators-for-authentication-and-authorization.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-custom-decorators-for-authentication-and-authorization.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/555_custom-decorators-for-authentication-and-authorization.m4v"&gt;&lt;img alt="Custom Decorators for Authentication and Authorization" src="http://a.images.blip.tv/Nextdayvideo-CustomDecoratorsForAuthenticationAndAuthorization489-643.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;To provide access to enterprise directory data and services to developers at
Texas A&amp;amp;M; University, we have implemented a set of RESTful web services,
using Django as our framework. Because these services include access to
protected data, all web service clients must authenticate and be authorized to
access a particular service. In order to implement the logic for making
authentication and authorization decisions in one place, and cleanly apply it
to any view, we wrote a custom decorator. This talk will cover the basic
concepts behind decorators, how to write a decorator, and walk through our
implementation of a decorator for authN/authZ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/555_custom-decorators-for-authentication-and-authorization.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/555_custom-decorators-for-authentication-and-authorization.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Daemon Slaying! Or, Unix Daemons in Python for fun and profit!</title><link href="/pytexas-2011/pytexas-2011-daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/558_daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.m4v"&gt;&lt;img alt="Daemon Slaying! Or, Unix Daemons in Python for fun and profit!" src="http://a.images.blip.tv/Nextdayvideo-DaemonSlayingOrUnixDaemonsInPythonForFunAndProfit354-542.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Daemons are those pieces of software in Unix (including Linux and Mac OS X)
that run in the background and typically start automatically during system
boot. Times when you might want a daemon include:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Monitoring an &amp;quot;inbox&amp;quot; directory in situations where a cron job is not appropriate&lt;/li&gt;
&lt;li&gt;Managing (possibly multiple) instances of software according to business rules&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although most daemons are written in C, Python is a great alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/558_daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/558_daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.m4v&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tags: gotchas&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="gotchas"></category></entry><entry><title>Getting Started with PyMongo</title><link href="/pytexas-2011/pytexas-2011-getting-started-with-pymongo.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-getting-started-with-pymongo.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/559_getting-started-with-pymongo.m4v"&gt;&lt;img alt="Getting Started with PyMongo" src="http://a.images.blip.tv/Nextdayvideo-GettingStartedWithPyMongo126-736.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;In the last month, we've started an effort to aggregate our logs so we can do
some real-time, holistic log analysis. Among other things, we are tracking
failed logins across all points of entry, identifying possibly compromised
accounts (simultaneous logins from multiple IPs, geographically disparate
logins), and identifying high-volume mailers across multiple mail relays. The
talk will include an introduction to MongoDB (NoSQL, data structures,
querying, indexing, differences from relational databases, etc); some
important performance and reliability features like its support for replica
sets, sharding, and map/reduce; and some very cool features like GridFS and
geospatial indexing. All of this, with the exception of database
configuration, will be demoed with MongoDB's python client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/559_getting-started-with-pymongo.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/559_getting-started-with-pymongo.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="/pytexas-2011/pytexas-2011-lightning-talks.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Unknown</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-lightning-talks.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/557_lightning-talks.m4v"&gt;&lt;img alt="Lightning Talks" src="http://a.images.blip.tv/Nextdayvideo-LightningTalks506-734.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/557_lightning-talks.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/557_lightning-talks.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Logging De-Mystified! Basics to Advanced!</title><link href="/pytexas-2011/pytexas-2011-logging-de-mystified-basics-to-advanced.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-logging-de-mystified-basics-to-advanced.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/560_logging-de-mystified-basics-to-advanced.m4v"&gt;&lt;img alt="Logging De-Mystified! Basics to Advanced!" src="http://a.images.blip.tv/Nextdayvideo-LoggingDeMystifiedBasicsToAdvanced968-723.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Walker Hale will explore the standard Python Logging Module and provide a tour
from the basics through intermediate examples, and touch on advanced logging
strategies.&lt;/p&gt;
&lt;p&gt;Do you write programs that run longer than 5 minutes? Would you like to
leverage Python's excellent logging system more fully? Even if you don't use
Python for your long-running processes, you will learn valuable and widely-
applicable logging techniques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/560_logging-de-mystified-basics-to-advanced.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/560_logging-de-mystified-basics-to-advanced.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Packaging</title><link href="/pytexas-2011/pytexas-2011-packaging.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Unknown</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-packaging.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/552_packaging.m4v"&gt;&lt;img alt="Packaging" src="http://a.images.blip.tv/Nextdayvideo-Packaging843-482.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/552_packaging.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/552_packaging.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Programming a Simple Game in Python</title><link href="/pytexas-2011/pytexas-2011-programming-a-simple-game-in-python.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Greg Lindstrom</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-programming-a-simple-game-in-python.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/551_programming-a-simple-game-in-python.m4v"&gt;&lt;img alt="Programming a Simple Game in Python" src="http://a.images.blip.tv/Nextdayvideo-ProgrammingASimpleGameInPython300-773.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/551_programming-a-simple-game-in-python.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/551_programming-a-simple-game-in-python.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Simplify your (Python) Life</title><link href="/pytexas-2011/pytexas-2011-simplify-your-python-life.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Sameer Khan</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-simplify-your-python-life.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/554_simplify-your-python-life.m4v"&gt;&lt;img alt="Simplify your (Python) Life" src="http://a.images.blip.tv/Nextdayvideo-SimplifyYourPythonLife131-952.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Following are the topics we'll cover:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Language/API design and how warts can creep into even well designed products over time.&lt;/li&gt;
&lt;li&gt;&amp;quot;Worse is better&amp;quot; approach may be good enough (&amp;quot;satisficing&amp;quot;).&lt;/li&gt;
&lt;li&gt;An eclectic mix of language constructs that usually trip newcomers--and sometimes even experienced programmers--which we'll survey:
1. __new__
2. __del__
3. __call__
4. __slots__
5. classmethod vs. staticmethod
6. decorators (guidelines for writing your own)
7. class decorators vs. metaclasses
8. delegation via getattr
9. Interfaces and getattr&lt;/li&gt;
&lt;li&gt;We'll see how delegation and interfaces tie into the thinking behind GoF Design Patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/554_simplify-your-python-life.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/554_simplify-your-python-life.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>The Magic of Metaprogramming</title><link href="/pytexas-2011/pytexas-2011-the-magic-of-metaprogramming.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Jeff Rush</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-the-magic-of-metaprogramming.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/550_the-magic-of-metaprogramming.m4v"&gt;&lt;img alt="The Magic of Metaprogramming" src="http://a.images.blip.tv/Nextdayvideo-TheMagicOfMetaprogramming664-615.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/550_the-magic-of-metaprogramming.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/550_the-magic-of-metaprogramming.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Using Message Queues for Distributed Processing</title><link href="/pytexas-2011/pytexas-2011-using-message-queues-for-distributed-processing.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-using-message-queues-for-distributed-processing.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/562_using-message-queues-for-distributed-processing.m4v"&gt;&lt;img alt="Using Message Queues for Distributed Processing" src="http://a.images.blip.tv/Nextdayvideo-UsingMessageQueuesForDistributedProcessing897-27.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;About six months ago we moved our account provisioning process from a
monolithic Perl script to a set of distributed, interconnected python scripts.
By using message queues (specifically beanstalkd) to pass messages between the
processes, we were able to build a system that was much faster, more reliable
and more flexible.&lt;/p&gt;
&lt;p&gt;I will walk through the process that led us to choose beanstalkd, look at some
alternatives that are available, and describe some use cases for message
queues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/562_using-message-queues-for-distributed-processing.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/562_using-message-queues-for-distributed-processing.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>virtualenv, pip, and virtualenvwrapper</title><link href="/pytexas-2011/pytexas-2011-virtualenv-pip-and-virtualenvwrapper.html" rel="alternate"></link><updated>2014-04-08T20:28:00+00:00</updated><author><name>Jon Nials</name></author><id>tag:,2012-02-23:pytexas-2011/pytexas-2011-virtualenv-pip-and-virtualenvwrapper.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/553_virtualenv-pip-and-virtualenvwrapper.m4v"&gt;&lt;img alt="virtualenv, pip, and virtualenvwrapper" src="http://a.images.blip.tv/Nextdayvideo-virtualenvPipAndVirtualenvwrapper256-563.jpg" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Category: PyTexas 2011&lt;/li&gt;
&lt;li&gt;Language: English&lt;/li&gt;
&lt;li&gt;Direct Link: &lt;a class="reference external" href="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/553_virtualenv-pip-and-virtualenvwrapper.m4v"&gt;http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/553_virtualenv-pip-and-virtualenvwrapper.m4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry></feed>